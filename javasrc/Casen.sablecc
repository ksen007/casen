Package parser; 

Helpers

  unicode_input_character = [0..0xffff];
  ht  = 0x0009;
  lf  = 0x000a;
  ff  = 0x000c;
  cr  = 0x000d;
  sp  = ' ';

  input_character = [unicode_input_character - [cr + lf]];


  unicode_letter =
    [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
    [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
    [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
    [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
    [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
    [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
    [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
    [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
    [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
    [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
    [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
    [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
    [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
    [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
    [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
    [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
    [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
    [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
    [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
    [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
    [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
    [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
    [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
    [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
    [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
    [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
    [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
    [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
    [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
    [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
    [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
    [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
    [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
    [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
    [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
    [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
    [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
    [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
    [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
    [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
    [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
    [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
    [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
    [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
    [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
    [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
    [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
    [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
    [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
    [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
    [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
    [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
    [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];

  unicode_digit =
    [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9] | [0x0966..0x096f] |
    [0x09e6..0x09ef] | [0x0a66..0x0a6f] | [0x0ae6..0x0aef] | [0x0b66..0x0b6f] |
    [0x0be7..0x0bef] | [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f] |
    [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29] | [0xff10..0xff19];

  java_letter = unicode_letter | '_';
  java_letter_or_digit = unicode_letter | unicode_digit | '_';

  non_zero_digit = ['1'..'9'];
  digit = ['0'..'9'];
  hex_digit = ['0'..'9'] | ['a'..'f'] | ['A'..'F'];
  octal_digit = ['0'..'7'];
  zero_to_three = ['0'..'3'];

  decimal_numeral = '0' | non_zero_digit digit*;
  hex_numeral = '0' ('x' | 'X') hex_digit+;
  octal_numeral = '0' octal_digit+;

  integer_type_suffix = 'l' | 'L';

  exponent_part = ('e' | 'E') ('+' | '-')? digit+;

  float_type_suffix = 'f' | 'F' | 'd' | 'D';

  single_character = [input_character - [''' + '\']];
  octal_escape = '\' (octal_digit octal_digit? | zero_to_three octal_digit octal_digit);
  escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\' | octal_escape;
  string_character = [input_character - ['"' + '\']] | escape_sequence;
  symbol = '-'| '&' | '*' | '+' | '%' | '<' | '>' | '=' | '~' | '!' | '|' | '^' | '@' | ':' | '?' ;

semi  = ';';

Tokens

	line_terminator = (lf | cr | cr lf | semi)+;
	amp = '&';
	amp_amp = '&&';
	amp_assign = '&=';
	assign = '=';
	bar = '|';
	bar_assign = '|=';
	bar_bar = '||';
	caret = '^';
	caret_assign = '^=';
	emark = '!';
	eq = '==';
	gt = '>';
	gteq = '>=';
	lt = '<';
	lteq = '<=';
	minus = '-';
	minus_assign = '-=';
	neq = '!=';
	percent = '%';
	percent_assign = '%=';
	plus = '+';
	plus_assign = '+=';
	shl = '<<';
	shl_assign = '<<=';
	shr = '>>';
	shr_assign = '>>=';
	slash = '/';
	slash_assign = '/=';
	star = '*';
	star_assign = '*=';
	tilde = '~';
	
	colon = ':';
	qmark = '?';
	at = '@';
	comma = ',';
	dot   = '.';
	l_bkt = '[';
	l_brc = '{';
	l_par = '(';
	r_bkt = ']';
	r_brc = '}';
	r_par = ')';
	c_begin = '[[';
	c_end = ']]';


  floating_point_literal =
    digit+ '.' digit* exponent_part? float_type_suffix? |
    '.' digit+ exponent_part? float_type_suffix? |
    digit+ exponent_part float_type_suffix? |
    digit+ exponent_part? float_type_suffix;

  integer_literal =
    decimal_numeral integer_type_suffix? |
    hex_numeral integer_type_suffix? |
    octal_numeral integer_type_suffix?;

  string_literal = '"' string_character* '"';

  // identifier

  identifier = java_letter java_letter_or_digit*;
  local_identifier = '$'  java_letter java_letter_or_digit*;

  // white space and comments

  white_space = (sp | ht | ff)*;
  end_of_line_comment = '//' input_character* (lf | cr | cr lf | semi)*;

  return = 'return';
  goto = 'goto';
  if = 'if';
  def = 'def';

Ignored Tokens

  white_space,
  end_of_line_comment;

Productions

	program {-> program} =   
		line_terminator? block? {-> New program.stmts([block.labeled_stmt]) };

	block  {-> labeled_stmt*} = 
	       terminated_statement* labeled_stmt line_terminator? {-> [terminated_statement.labeled_stmt, labeled_stmt.labeled_stmt]} ;

	terminated_statement {-> labeled_stmt} = 
		labeled_stmt line_terminator {-> labeled_stmt};

	labeled_stmt {-> labeled_stmt} = 
		     {labeled} identifier colon stmt {-> New labeled_stmt.labeled(identifier,stmt.stmt) }
	|	     {unlabeled} stmt {-> New labeled_stmt.un_labeled(stmt.stmt) };

	stmt  {-> stmt} = 
	      {expr} expr {-> New stmt.simple(expr.expr) }
    	|     {return} return expr {-> New stmt.return(expr.expr) }
    	|     {return_none} return {-> New stmt.return_none() }
	|     {if} if l_par expr r_par goto identifier {-> New stmt.if(expr.expr, identifier)} ;

	expr {-> expr} = 
	     {no_assign} lor_expr {-> lor_expr.expr} 
    	|    {assign} lor_expr assignop expr {-> New expr.assign(lor_expr.expr,assignop.assign_op,expr.expr)};

  	assignop {-> assign_op} =  
		 {assign}         assign {-> New assign_op.assign(assign) }
    	|	 {star_assign}    star_assign {-> New assign_op.mul_assign(star_assign)}
    	|	 {slash_assign}   slash_assign {-> New assign_op.div_assign(slash_assign)}
    	|	 {percent_assign} percent_assign {-> New assign_op.mod_assign(percent_assign)}
    	|	 {plus_assign}    plus_assign {-> New assign_op.plus_assign(plus_assign)}
    	|	 {minus_assign}   minus_assign {-> New assign_op.minus_assign(minus_assign)}
    	|	 {shl_assign}     shl_assign {-> New assign_op.shl_assign(shl_assign)}
    	|	 {shr_assign}     shr_assign {-> New assign_op.shr_assign(shr_assign)}
    	|	 {amp_assign}     amp_assign {-> New assign_op.and_expr(amp_assign)}
    	|	 {caret_assign}   caret_assign {-> New assign_op.xor_assign(caret_assign)}
    	|	 {bar_assign}     bar_assign {-> New assign_op.or_assign(bar_assign)} ;

	lor_expr {-> expr} = 
		 {simple} land_expr {-> land_expr.expr}
	|	 {lor} lor_expr bar_bar land_expr {-> New expr.bool_to_bool_binop(lor_expr.expr,New bool_to_bool_binop.lor(bar_bar),land_expr.expr)};


	land_expr {-> expr} = 
		  {simple} or_expr {-> or_expr.expr}
	| 	  {land} land_expr amp_amp or_expr {-> New expr.bool_to_bool_binop(land_expr.expr,New bool_to_bool_binop.land(amp_amp),or_expr.expr)};

	or_expr {-> expr} = 
		{simple} xor_expr {-> xor_expr.expr}
	|	{or} or_expr bar xor_expr {-> New expr.int_to_int_binop(or_expr.expr,New int_to_int_binop.or(bar),xor_expr.expr)};

	xor_expr {-> expr} = 
		 {simple} and_expr {-> and_expr.expr}
	|	 {xor} xor_expr caret and_expr {-> New expr.int_to_int_binop(xor_expr.expr,New int_to_int_binop.xor(caret),and_expr.expr)};

	and_expr {-> expr} = 
		 {simple} eq_expr {-> eq_expr.expr}
	|	 {and} and_expr amp eq_expr {-> New expr.int_to_int_binop(and_expr.expr,New int_to_int_binop.and(amp),eq_expr.expr)};
	
	eq_expr {-> expr} = 
		{simple} ineq_expr {ineq_expr.expr}
	|	{eq}  eq_expr eq ineq_expr {-> New expr.num_to_bool_binop(eq_expr.expr,New num_to_bool_binop.eq(eq),ineq_expr.expr)}
	|	{neq} eq_expr neq ineq_expr {-> New expr.num_to_bool_binop(eq_expr.expr,New num_to_bool_binop.neq(neq),ineq_expr.expr)};

	ineq_expr {-> expr} = 
		  {simple} shift_expr {-> shift_expr.expr}
	|	  {lt} ineq_expr lt shift_expr {-> New expr.num_to_bool_binop(ineq_expr.expr,New num_to_bool_binop.lt(lt),shift_expr.expr)}
	|	  {lteq} ineq_expr lteq shift_expr {-> New expr.num_to_bool_binop(ineq_expr.expr,New num_to_bool_binop.lteq(lteq),shift_expr.expr)}
	|	  {gt} ineq_expr gt shift_expr {-> New expr.num_to_bool_binop(ineq_expr.expr,New num_to_bool_binop.gt(gt),shift_expr.expr)}
	|	  {gteq} ineq_expr gteq shift_expr {-> New expr.num_to_bool_binop(ineq_expr.expr,New num_to_bool_binop.gteq(gteq),shift_expr.expr)};

	shift_expr {-> expr} = 
		   {simple} plus_expr {-> plus_expr.expr}
	|	   {shl} shift_expr shl plus_expr {-> New expr.int_to_int_binop(shift_expr.expr,New int_to_int_binop.shl(shl),plus_expr.expr)}
	|	   {shr} shift_expr shr plus_expr {-> New expr.int_to_int_binop(shift_expr.expr,New int_to_int_binop.shr(shr),plus_expr.expr)};
 
	plus_expr {-> expr} = 
		  {simple} mul_expr {-> mul_expr.expr}
	|	  {plus} plus_expr plus mul_expr {-> New expr.num_to_num_binop(plus_expr.expr,New num_to_num_binop.plus(plus),mul_expr.expr)}
	|	  {minus} plus_expr minus mul_expr {-> New expr.num_to_num_binop(plus_expr.expr,New num_to_num_binop.minus(minus),mul_expr.expr)};

	mul_expr {-> expr} =
		 {simple} unop_expr {-> unop_expr.expr}
        |	 {mul} mul_expr star unop_expr {-> New expr.num_to_num_binop(mul_expr.expr,New num_to_num_binop.mul(star),unop_expr.expr)}
	|	 {div}  mul_expr slash unop_expr {-> New expr.num_to_num_binop(mul_expr.expr,New num_to_num_binop.div(slash),unop_expr.expr)}
	|	 {mod} mul_expr percent unop_expr {-> New expr.int_to_int_binop(mul_expr.expr,New int_to_int_binop.mod(percent),unop_expr.expr)};

	unop_expr {-> expr} =
		  {simple} apply_expr {-> apply_expr.expr}
    	|   	  {not} emark unop_expr {-> New expr.bool_to_bool_unop(New bool_to_bool_unop.not(emark),unop_expr.expr)}
    	|  	  {complement} tilde unop_expr {-> New expr.int_to_int_unop(New int_to_int_unop.complement(tilde),unop_expr.expr)}
    	|  	  {minus} minus unop_expr {-> New expr.num_to_num_unop(New num_to_num_unop.minus(minus),unop_expr.expr)};


	apply_expr  {-> expr} = 
		    {simple} atom_expr {-> atom_expr.expr}
	|	    {apply} apply_expr context_expr? atom_expr {-> New expr.apply(apply_expr.expr,context_expr.expr,atom_expr.expr)};   

	context_expr {-> expr} =  {simple} c_begin expr c_end {-> expr.expr};

	atom_expr {-> expr} =
		  {index} atom l_bkt expr r_bkt {-> New expr.index(atom.expr,expr.expr) }
	|	  {dot} atom dot identifier {-> New expr.field(atom.expr,identifier)};


	atom {-> expr} =
	     {identifier} identifier {-> New expr.identifier(identifier)}
	|    {lidentifier} local_identifier {-> New expr.local_identifier(local_identifier)}
	|    {noarg} l_par r_par {-> New expr.args(()) } 
	|    {args}  l_par arglist r_par {-> New expr.args([arglist.expr]) }
	|    {integer} integer_literal {-> New expr.integer(integer_literal) }
	|    {float} floating_point_literal {-> New expr.float(floating_point_literal)}
	|    {string} string_literal {-> New expr.string(string_literal) }
	|    {fun} def identifier fun {-> New expr.named_fun(identifier,fun.fun) }
	|    {block} fun {-> New expr.fun(fun.fun)} ;

	arglist {-> expr*} =
		{simple} expr {-> [expr.expr]}
	|	{list} arglist comma expr {-> [arglist.expr,expr.expr]};

	fun {-> fun } =   
	    {simple} lbrace param? line_terminator? block? rbrace {-> New fun.definition([param.identifier], [block.labeled_stmt])};

	param {-> identifier*} = [left]:bar paramlist [right]:bar {-> [paramlist.identifier]} ;

	paramlist {-> identifier*} = 
		  {simple} identifier {-> [identifier] }
	|	  {list}   paramlist comma identifier {-> [paramlist.identifier,identifier] };


	lbrace = 
	       l_brc line_terminator?;

	rbrace =
	       r_brc;

Abstract Syntax Tree


	 program = 
	 	 {stmts} [stmts]:labeled_stmt*;

	 labeled_stmt = 
	 	      {labeled} [label]:identifier [stmt]:stmt
 	 |	      {un_labeled} [stmt]:stmt;

	 stmt = 
	      {simple} expr
	 |    {return} [expr]:expr
	 |    {return_none}
	 |    {if} [cond]:expr [label]:identifier;

	 expr  = 
	       {assign} [left]:expr [op]:assign_op [right]:expr
	 |     {bool_to_bool_binop}  [left]:expr [op]:bool_to_bool_binop  [right]:expr
	 |     {num_to_bool_binop}  [left]:expr [op]:num_to_bool_binop  [right]:expr
	 |     {num_to_num_binop}  [left]:expr [op]:num_to_num_binop  [right]:expr
	 |     {int_to_int_binop}  [left]:expr [op]:int_to_int_binop  [right]:expr
	 |     {bool_to_bool_unop}  [op]:bool_to_bool_unop  [expr]:expr
	 |     {int_to_int_unop}  [op]:int_to_int_unop  [expr]:expr
	 |     {num_to_num_unop}  [op]:num_to_num_unop  [expr]:expr
	 |     {apply} [left]:expr [context]:expr [right]:expr
	 |     {index} [base]:expr [index]:expr
	 |     {field} [base]:expr [field]:identifier
	 |     {identifier} identifier
	 |     {local_identifier} local_identifier
	 |     {args} [args]:expr*
	 |     {integer} [integer]:integer_literal
	 |     {float} [float]:floating_point_literal
	 |     {string} [string]:string_literal
	 |     {named_fun} [name]:identifier [fun]:fun
	 |     {fun} [fun]:fun;

	 fun	=	
	 	{definition} [params]:identifier* [stmts]:labeled_stmt*;


	num_to_bool_binop =
		{eq} eq
	|	{neq} neq
	|	{lt} lt
	|	{lteq} lteq
	|	{gt} gt
	|	{gteq} gteq;

	num_to_num_binop =
		{plus} plus
	|	{minus} minus
	|	{div} slash
	|	{mul} star
	|	{mod} percent;

	
	int_to_int_binop =
		{mod} percent
	|	{shl} shl
	|	{shr} shr
	|	{xor} caret
	|	{or} bar
	|	{and} amp;

	bool_to_bool_binop =
		{lor} bar_bar
	|	{land} amp_amp;

	int_to_int_unop =
		{complement} tilde;

	num_to_num_unop =
		{minus} minus;

	bool_to_bool_unop =
		{not} emark;

 	assign_op =  
		 {assign}         assign 
    	|	 {mul_assign}    star_assign 
    	|	 {div_assign}   slash_assign 
    	|	 {mod_assign} percent_assign 
    	|	 {plus_assign}    plus_assign 
    	|	 {minus_assign}   minus_assign 
    	|	 {shl_assign}     shl_assign 
    	|	 {shr_assign}     shr_assign 
    	|	 {and_assign}     amp_assign 
    	|	 {xor_assign}   caret_assign 
    	|	 {or_assign}     bar_assign;


